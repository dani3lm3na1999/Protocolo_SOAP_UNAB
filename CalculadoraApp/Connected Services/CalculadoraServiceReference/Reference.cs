//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CalculadoraApp.CalculadoraServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CalculadoraServiceReference.ICalculadora")]
    public interface ICalculadora {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Sum", ReplyAction="http://tempuri.org/ICalculadora/SumResponse")]
        double Sum(double num1, double num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Sum", ReplyAction="http://tempuri.org/ICalculadora/SumResponse")]
        System.Threading.Tasks.Task<double> SumAsync(double num1, double num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Subtract", ReplyAction="http://tempuri.org/ICalculadora/SubtractResponse")]
        double Subtract(double num1, double num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Subtract", ReplyAction="http://tempuri.org/ICalculadora/SubtractResponse")]
        System.Threading.Tasks.Task<double> SubtractAsync(double num1, double num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Multiply", ReplyAction="http://tempuri.org/ICalculadora/MultiplyResponse")]
        double Multiply(double num1, double num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Multiply", ReplyAction="http://tempuri.org/ICalculadora/MultiplyResponse")]
        System.Threading.Tasks.Task<double> MultiplyAsync(double num1, double num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Divide", ReplyAction="http://tempuri.org/ICalculadora/DivideResponse")]
        double Divide(double num1, double num2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Divide", ReplyAction="http://tempuri.org/ICalculadora/DivideResponse")]
        System.Threading.Tasks.Task<double> DivideAsync(double num1, double num2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculadoraChannel : CalculadoraApp.CalculadoraServiceReference.ICalculadora, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculadoraClient : System.ServiceModel.ClientBase<CalculadoraApp.CalculadoraServiceReference.ICalculadora>, CalculadoraApp.CalculadoraServiceReference.ICalculadora {
        
        public CalculadoraClient() {
        }
        
        public CalculadoraClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculadoraClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculadoraClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculadoraClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Sum(double num1, double num2) {
            return base.Channel.Sum(num1, num2);
        }
        
        public System.Threading.Tasks.Task<double> SumAsync(double num1, double num2) {
            return base.Channel.SumAsync(num1, num2);
        }
        
        public double Subtract(double num1, double num2) {
            return base.Channel.Subtract(num1, num2);
        }
        
        public System.Threading.Tasks.Task<double> SubtractAsync(double num1, double num2) {
            return base.Channel.SubtractAsync(num1, num2);
        }
        
        public double Multiply(double num1, double num2) {
            return base.Channel.Multiply(num1, num2);
        }
        
        public System.Threading.Tasks.Task<double> MultiplyAsync(double num1, double num2) {
            return base.Channel.MultiplyAsync(num1, num2);
        }
        
        public double Divide(double num1, double num2) {
            return base.Channel.Divide(num1, num2);
        }
        
        public System.Threading.Tasks.Task<double> DivideAsync(double num1, double num2) {
            return base.Channel.DivideAsync(num1, num2);
        }
    }
}
